generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Account {
  accountId   Int        @id(map: "PK_Account") @default(autoincrement())
  email       String?    @db.VarChar(Max)
  password    String?    @db.VarChar(Max)
  facebookURL String?    @db.VarChar(Max)
  facebookId  String?    @db.VarChar(Max)
  roleId      Int?
  createdDate DateTime?  @default(now(), map: "DF_Account_createdDate") @db.DateTime
  Role        Role?      @relation(fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Account_Role")
  Comment     Comment[]
  Post        Post[]
  PostView    PostView[]
}

model Category {
  categoryId   Int     @id(map: "PK_Category") @default(autoincrement())
  categoryName String? @db.NVarChar(100)
  imageURL     String? @db.VarChar(Max)
  Post         Post[]
}

model Post {
  postId      Int        @id(map: "PK_Post") @default(autoincrement())
  title       String?    @db.NVarChar(Max)
  imageURL    String?    @db.VarChar(Max)
  content     String?    @db.NVarChar(Max)
  createdDate DateTime?  @default(now(), map: "DF_Post_createdDate") @db.DateTime
  createdBy   Int?
  categoryId  Int?
  tagId       Int?
  innerTagId  Int?
  description String?    @db.NVarChar(Max)
  Comment     Comment[]
  Account     Account?   @relation(fields: [createdBy], references: [accountId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Post_Account")
  Category    Category?  @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Post_Category")
  InnerTag    InnerTag?  @relation(fields: [innerTagId], references: [innerTagId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Post_InnerTag")
  Tag         Tag?       @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Post_Tag")
  PostView    PostView[]
}

model Role {
  roleId   Int       @id(map: "PK_Role") @default(autoincrement())
  roleName String?   @db.VarChar(50)
  Account  Account[]
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61AF87DA37") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model Tag {
  tagId    Int        @id(map: "PK_Tag") @default(autoincrement())
  tagName  String?    @db.NVarChar(100)
  InnerTag InnerTag[]
  Post     Post[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model PostView {
  viewId    Int       @id(map: "PK_PostView") @default(autoincrement())
  accountId Int?
  postId    Int?
  viewDate  DateTime? @default(now(), map: "DF_PostView_viewDate") @db.DateTime
  Account   Account?  @relation(fields: [accountId], references: [accountId], onDelete: NoAction, onUpdate: NoAction, map: "FK_PostView_Account")
  Post      Post?     @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "FK_PostView_Post")

  
}

model Comment {
  commentId   Int       @id(map: "PK_Comment") @default(autoincrement())
  content     String?   @db.NVarChar(Max)
  createdDate DateTime? @default(now(), map: "DF_Comment_createdDate") @db.DateTime
  accountId   Int?
  postId      Int?
  Account     Account?  @relation(fields: [accountId], references: [accountId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Comment_Account")
  Post        Post?     @relation(fields: [postId], references: [postId], onDelete: NoAction, onUpdate: NoAction, map: "FK_Comment_Post")
}

model InnerTag {
  innerTagId   Int     @id(map: "PK_InnerTag") @default(autoincrement())
  tagId        Int?
  innerTagName String? @db.NVarChar(Max)
  Tag          Tag?    @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction, map: "FK_InnerTag_Tag")
  Post         Post[]
}
